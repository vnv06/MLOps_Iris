name: CI - Main Branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup DVC
      uses: iterative/setup-dvc@v1
    
    - name: Pull data and model from DVC
      run: |
        dvc pull data/ artifacts/model.joblib
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Setup DVC
      uses: iterative/setup-dvc@v1
    
    - name: Pull data and model from DVC
      run: |
        dvc pull data/ artifacts/model.joblib
    
    - name: Run integration test
      run: |
        echo "## Integration Test Results" > report.md
        echo "### End-to-End Test" >> report.md
        python -c "
        import joblib
        import pandas as pd
        
        try:
            # Test model loading and prediction
            model = joblib.load('artifacts/model.joblib')
            print('✅ Model loaded successfully')
            
            # Test prediction with sample data
            sample_data = pd.DataFrame({
                'sepal_length': [5.1],
                'sepal_width': [3.5],
                'petal_length': [1.4],
                'petal_width': [0.2]
            })
            
            prediction = model.predict(sample_data)
            print(f'✅ Prediction made: {prediction[0]}')
            print('✅ Integration test passed')
            
        except Exception as e:
            print('❌ Integration test failed:', str(e))
            exit(1)
        " >> report.md
    
    - name: CML Report
      uses: iterative/cml@v2
      with:
        file: report.md
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
